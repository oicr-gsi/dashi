import gsiqcetl.bcl2fastq.parse
import gsiqcetl.bcl2fastq.utility
import dash
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html
import dash.dependencies as dep
import dash_table as dt
import pandas
import plotly.graph_objs as go
import numpy as np
import urllib
from datetime import datetime
import sd_material_ui as sd

pandas.options.mode.chained_assignment = None

rnaseq = pandas.read_hdf('./data/rnaseqqc_cache.hd5')
rnaseq.rename(columns={'Sample Name': 'library'}, inplace=True)

bamqc = pandas.read_hdf('./data/bamqc_cache.hd5')

bcl2fastq = gsiqcetl.bcl2fastq.parse.load_cache(
    gsiqcetl.bcl2fastq.parse.CACHENAME.SAMPLES,
    './data/bcl2fastq_cache.hd5')
bcl2fastq['library'] = bcl2fastq['SampleID'].str.extract('SWID_\d+_(\w+_\d+_.*_\d+_[A-Z]{2})_')

df = bcl2fastq.merge(rnaseq, on='library', how='outer')
df = df.merge(bamqc, on='library', how='outer')
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======

df['properly paired reads'] = np.where(df['properly paired reads'].isnull(),
                                       df['rRNA Contamination (%reads properly paired)'], df['properly paired reads'])

>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
>>>>>>> intermediate commit
df = df.drop(columns=['Sequencer Run Name', 'Lane Number'])
=======
>>>>>>> Intermediate commit

<<<<<<< HEAD
df['properly paired reads'] = np.where(df['properly paired reads'].isnull(),
                                       df['rRNA Contamination (%reads properly paired)'], df['properly paired reads'])

df = df.drop(columns=['Sequencer Run Name', 'Lane Number'])

<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
layout = html.Div(children=[
    dcc.ConfirmDialog(
        id='warning',
        message='The selected run does not return any data. Analysis may have not been completed yet.' '''
        '''' Click either "Ok" or "Cancel" to return to the most recent run.'
    ),
    dcc.Location(
        id='run_url',
        refresh=False
    ),
    html.Div(children=
    dcc.Dropdown(
        id='select_a_run',
        options=[{'label': r, 'value': r} for r in runs],
        value=runs[0],
        clearable=False
    )),
    html.Div(
=======
runs = df['Run'].sort_values(ascending=False).unique()
runs = [x for x in runs if str(x) != 'nan']

navbar = dbc.NavbarSimple(
    [html.Div(children=
    dbc.DropdownMenu(children=
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
        dcc.Dropdown(
            id='select_a_run',
            options=[{'label': r, 'value': r} for r in runs],
            value=runs[0],
            clearable=False
        ),
        nav=True, )),
        dbc.DropdownMenu(
            nav=True,
            in_navbar=True,
            label='Menu',
            children=[
                dbc.DropdownMenuItem('Entry 1'),
                dbc.DropdownMenuItem('Entry 2'),
                dbc.DropdownMenuItem(divider=True),
                dbc.DropdownMenuItem('Entry 3'),
            ],
        ),
    ],
    brand='Report Filters',
    sticky='top',
    expand= 'lg'
)
layout = html.Div(children=[

    sd.Drawer(id='Filter_drawer',
              width='40%',
              docked=False,
              children=[
                  html.Div([html.P(children='Report Filters', style={'font-size': '30px', 'padding-top': '10px',
                                                                     'text-align': 'center'}),
                            sd.Divider(),
                            html.P(children='Select a Run', style={'padding-left': '5px', 'font-weight': 'bold'}),
                            dcc.Dropdown(
                                id='select_a_run',
                                options=[{'label': r, 'value': r} for r in runs],
                                value=runs[0],
                                clearable=False
                            ),
                            html.Br(),
                            html.P(children='Select a Lane', style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.RadioItems(
                                    id='lane_select',
                                    labelStyle={'display': 'inline-block', 'padding-left': '30px', }
                                )
                            ),
                            html.Br(),
                            html.P(children='Enter a Threshold Value for the Index Clusters',
                                   style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.Input(
                                    id='index_threshold',
                                    placeholder='Press "Enter" when complete',
                                    debounce=True,
                                    type='number',
                                    value='0'
                                )
                            ),
                            html.Br(),
                            html.P(children='Select Which Type of Sample to View',
                                   style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.Checklist(
                                    id='pass/fail',
                                    options=[
                                        {'label': 'Passed Samples', 'value': 'Pass'},
                                        {'label': 'Failed Samples', 'value': 'Fail'},
                                    ],
                                    value=['Pass', 'Fail'],
                                    labelStyle={'paddingLeft': 30}

                                ),
                            ),
                            html.Div([
                                html.P(children='Select a Sample Type',
                                       style={'padding-left': '5px', 'font-weight': 'bold'}),
                                dcc.Dropdown(
                                    id='sample_type',
                                    options=[{'label': 'DNA: WG', 'value': 'WG'},
                                             {'label': 'DNA: EX', 'value': 'EX'},
                                             {'label': 'DNA: TS', 'value': 'TS'},
                                             {'label': 'RNA: MR', 'value': 'MR'},
                                             {'label': 'RNA: SM', 'value': 'SM'},
                                             {'label': 'RNA: WT', 'value': 'WT'},
                                             {'label': 'RNA: TR', 'value': 'TR'}],
                                    value=['WG', 'EX', 'TS', 'MR', 'SM', 'WT', 'TR'],
                                    clearable=False,
                                    multi=True
                                )])
                            ])]
              ),
    sd.FlatButton(id='filters',
                  label='Report Filters'),
    html.Div(children=[
        dcc.ConfirmDialog(
            id='warning',
            message='The selected run does not return any data. Analysis may have not been completed yet.' '''

        '''' Click either "Ok" or "Cancel" to return to the most recent run.'
        ),
        dcc.Location(
            id='run_url',
            refresh=False
        ),
        html.P(children='Pool Balancing QC Report',
               style={'fontSize': 35, 'textAlign': 'center', 'fontWeight': '900', 'fontFamily': 'sans serif'}),
        html.Div(id='Title', style={'fontSize': 20, 'fontFamily': 'sans serif', 'textAlign': 'center', 'padding': 30}),
        html.Br(),

        html.Div(sd.Paper(html.Div(id='object_threshold', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center', }),
        html.Div(sd.Paper(html.Div(id='object_passed_samples', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center', 'padding': 50}),
        html.Div(sd.Paper(html.Div(id='object_option3', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center'}, ),
        html.Br(),
        html.Div([
            sd.Paper(
                dcc.Graph(id='SampleIndices'),
            ),
            sd.Paper(
                dcc.Graph(id='Per Cent Difference')
            )
        ],
            style={'padding-bottom': 30}),
        html.A(
            'Download Data',
            id='download-link',
            download='rawdata.csv',
            href='',
            target='_blank'
        ),
        html.Div(
            dt.DataTable(
                id='Summary Table',
                style_cell={
                    'minWidth': '150px',
                    'textAlign': 'center'
                },
                style_table={
                    'maxHeight': '1000px',
                    'maxWidth': '100%',
                    'overflowY': 'scroll',
                    'overflowX': 'scroll',

                },
                style_header={'backgroundColor': 'rgb(222,222,222)',
                              'fontSize': 16,
                              'fontWeight': 'bold'},
            )
        ),
    ],
        style={'padding-left': 100, 'paddingRight': 100})
])

<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
layout = html.Div(
    [html.Div(id='header',
              className='row flex_display',
              style={'margin-bottom': '25px'})
        [html.H3('Pool Balancing QC Report',
                 style={'margin-bottom':'0px'})],
     [html.Div([
            html.P('Filter by Run, Lane Number, and DNA/RNA', className='control_label'),
            dcc.Dropdown(
                id='select_a_run',
                options=[{'label': r, 'value': r} for r in runs],
                value=runs[0],
                clearable=False,
                className='dcc_control')],
            className="pretty_container four columns",
            id="cross-filter-options"),
        html.Div(children=[
            dcc.ConfirmDialog(
                id='warning',
                message='The selected run does not return any data. Analysis may have not been completed yet.' '''

=======
runs = df['Run'].sort_values(ascending=False).unique()
runs = [x for x in runs if str(x) != 'nan']

<<<<<<< HEAD
<<<<<<< HEAD
layout = html.Div(
    [html.Div(id='header',
              className='row flex_display',
              style={'margin-bottom': '25px'})
        [html.H3('Pool Balancing QC Report',
                 style={'margin-bottom':'0px'})],
     [html.Div([
            html.P('Filter by Run, Lane Number, and DNA/RNA', className='control_label'),
            dcc.Dropdown(
                id='select_a_run',
                options=[{'label': r, 'value': r} for r in runs],
                value=runs[0],
                clearable=False,
                className='dcc_control')],
            className="pretty_container four columns",
            id="cross-filter-options"),
        html.Div(children=[
            dcc.ConfirmDialog(
                id='warning',
                message='The selected run does not return any data. Analysis may have not been completed yet.' '''

>>>>>>> Intermediate commit
        '''' Click either "Ok" or "Cancel" to return to the most recent run.'
            ),
            dcc.Location(
                id='run_url',
                refresh=False
            ),
            html.Div(
                dcc.Dropdown(
                    id='lane_select'
                )),
            html.Div(id='Title', style={'fontSize': 25, 'textAlign': 'center', 'padding': 30}),
            html.Div(children=''),
            html.Div(
                dcc.Graph(id='SampleIndices'),
            ),
            html.A(
                'Download Data',
                id='download-link',
                download='rawdata.csv',
                href='',
                target='_blank'
            ),
            html.Div(
                dt.DataTable(
                    id='Summary Table',
                    style_cell={
                        'minWidth': '150px',
                        'textAlign': 'center'
                    },
                    style_table={
                        'maxHeight': '1000px',
                        'maxWidth': '100%',
                        'overflowY': 'scroll',
                        'overflowX': 'scroll'
                    },
                    style_header={'backgroundColor': 'rgb(222,222,222)',
                                  'fontSize': 16,
                                  'fontWeight': 'bold'},

                )),
        ]
        )
    ]])
<<<<<<< HEAD
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
=======
=======
>>>>>>> intermediate file
navbar = dbc.NavbarSimple(
    [html.Div(children=
    dbc.DropdownMenu(children=
        dcc.Dropdown(
            id='select_a_run',
            options=[{'label': r, 'value': r} for r in runs],
            value=runs[0],
            clearable=False
        ),
        nav=True, )),
        dbc.DropdownMenu(
            nav=True,
            in_navbar=True,
            label='Menu',
            children=[
                dbc.DropdownMenuItem('Entry 1'),
                dbc.DropdownMenuItem('Entry 2'),
                dbc.DropdownMenuItem(divider=True),
                dbc.DropdownMenuItem('Entry 3'),
            ],
        ),
    ],
    brand='Report Filters',
    sticky='top',
    expand= 'lg'
)
<<<<<<< HEAD
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
layout = html.Div(children=[

    sd.Drawer(id='Filter_drawer',
              width='40%',
              docked=False,
              children=[
                  html.Div([html.P(children='Report Filters', style={'font-size': '30px', 'padding-top': '10px',
                                                                     'text-align': 'center'}),
                            sd.Divider(),
                            html.P(children='Select a Run', style={'padding-left': '5px', 'font-weight': 'bold'}),
                            dcc.Dropdown(
                                id='select_a_run',
                                options=[{'label': r, 'value': r} for r in runs],
                                value=runs[0],
                                clearable=False
                            ),
                            html.Br(),
                            html.P(children='Select a Lane', style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.RadioItems(
                                    id='lane_select',
                                    labelStyle={'display': 'inline-block', 'padding-left': '30px', }
                                )
                            ),
                            html.Br(),
                            html.P(children='Enter a Threshold Value for the Index Clusters',
                                   style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.Input(
                                    id='index_threshold',
                                    placeholder='Press "Enter" when complete',
                                    debounce=True,
                                    type='number',
                                    value='0'
                                )
                            ),
                            html.Br(),
                            html.P(children='Select Which Type of Sample to View',
                                   style={'padding-left': '5px', 'font-weight': 'bold'}),
                            html.Div(
                                dcc.Checklist(
                                    id='pass/fail',
                                    options=[
                                        {'label': 'Passed Samples', 'value': 'Pass'},
                                        {'label': 'Failed Samples', 'value': 'Fail'},
                                    ],
                                    value=['Pass', 'Fail'],
                                    labelStyle={'paddingLeft': 30}

                                ),
                            ),
                            html.Div([
                                html.P(children='Select a Sample Type',
                                       style={'padding-left': '5px', 'font-weight': 'bold'}),
                                dcc.Dropdown(
                                    id='sample_type',
                                    options=[{'label': 'DNA: WG', 'value': 'WG'},
                                             {'label': 'DNA: EX', 'value': 'EX'},
                                             {'label': 'DNA: TS', 'value': 'TS'},
                                             {'label': 'RNA: MR', 'value': 'MR'},
                                             {'label': 'RNA: SM', 'value': 'SM'},
                                             {'label': 'RNA: WT', 'value': 'WT'},
                                             {'label': 'RNA: TR', 'value': 'TR'}],
                                    value=['WG', 'EX', 'TS', 'MR', 'SM', 'WT', 'TR'],
                                    clearable=False,
                                    multi=True
                                )])
                            ])]
              ),
    sd.FlatButton(id='filters',
                  label='Report Filters'),
    html.Div(children=[
        dcc.ConfirmDialog(
            id='warning',
            message='The selected run does not return any data. Analysis may have not been completed yet.' '''

        '''' Click either "Ok" or "Cancel" to return to the most recent run.'
<<<<<<< HEAD
=======
=======
>>>>>>> intermediate file
layout = html.Div(children=[
    dcc.ConfirmDialog(
        id='warning',
        message='The selected run does not return any data. Analysis may have not been completed yet.' '''

        '''' Click either "Ok" or "Cancel" to return to the most recent run.'
>>>>>>> intermediate commit
    ),
    dcc.Location(
        id='run_url',
        refresh=False
    ),
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> intermediate file

    html.Div(
        dcc.Dropdown(
            id='lane_select'
        )),
<<<<<<< HEAD
    html.Div(id='Title', style={'fontSize': 25, 'textAlign': 'center', 'padding': 30}),
    html.Div(children=''),
    html.Div(
        dcc.Graph(id='SampleIndices'),
    ),
=======
    html.Div([html.Div(children=
    dcc.Dropdown(
        id='select_a_run',
        options=[{'label': r, 'value': r} for r in runs],
        value=runs[0],
        clearable=False
    )),
        html.Div(
            dcc.Dropdown(
                id='lane_select'
            ))]),
    html.Div(id='Title', style={'fontSize': 25, 'textAlign': 'center', 'padding': 30}),
    html.Div(children=''),
>>>>>>> intermediate commit
=======
    html.Div(id='Title', style={'fontSize': 25, 'textAlign': 'center', 'padding': 30}),
    html.Div(children=''),
    html.Div(
        dcc.Graph(id='SampleIndices'),
    ),
>>>>>>> intermediate file
    html.A(
        'Download Data',
        id='download-link',
        download='rawdata.csv',
        href='',
        target='_blank'
    ),
    html.Div(
<<<<<<< HEAD
        dt.DataTable(
            id='Summary Table',
=======
        dcc.Graph(id='SampleIndices'),
    ),
    html.Div(
        dt.DataTable(
            id='Summary Table',
            editable=True,
            row_selectable='multi',
            selected_rows=[],
>>>>>>> intermediate commit
            style_cell={
                'minWidth': '150px',
                'textAlign': 'center'
            },
            style_table={
                'maxHeight': '1000px',
                'maxWidth': '100%',
                'overflowY': 'scroll',
                'overflowX': 'scroll'
            },
            style_header={'backgroundColor': 'rgb(222,222,222)',
                          'fontSize': 16,
                          'fontWeight': 'bold'},

        )),
<<<<<<< HEAD
]
)
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
>>>>>>> intermediate commit:poolqc/pooling_qc_sample.py
=======

>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
>>>>>>> Intermediate commit
=======

    html.Div(
        dcc.Graph(id='map_code')
    )
]
)
<<<<<<< HEAD
>>>>>>> intermediate commit
=======
=======
        ),
        dcc.Location(
            id='run_url',
            refresh=False
        ),
        html.P(children='Pool Balancing QC Report',
               style={'fontSize': 35, 'textAlign': 'center', 'fontWeight': '900', 'fontFamily': 'sans serif'}),
        html.Div(id='Title', style={'fontSize': 20, 'fontFamily': 'sans serif', 'textAlign': 'center', 'padding': 30}),
        html.Br(),

        html.Div(sd.Paper(html.Div(id='object_threshold', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center', }),
        html.Div(sd.Paper(html.Div(id='object_passed_samples', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center', 'padding': 50}),
        html.Div(sd.Paper(html.Div(id='object_option3', style={'fontSize': 20, 'fontWeight': 'bold'}),
                          style={'padding': 50, 'background-color': 'rgb(222,222,222)'}),
                 style={'width': '30%', 'display': 'inline-block', 'textAlign': 'center'}, ),
        html.Br(),
        html.Div([
            sd.Paper(
                dcc.Graph(id='SampleIndices'),
            ),
            sd.Paper(
                dcc.Graph(id='Per Cent Difference')
            )
        ],
            style={'padding-bottom': 30}),
        html.A(
            'Download Data',
            id='download-link',
            download='rawdata.csv',
            href='',
            target='_blank'
        ),
        html.Div(
            dt.DataTable(
                id='Summary Table',
                style_cell={
                    'minWidth': '150px',
                    'textAlign': 'center'
                },
                style_table={
                    'maxHeight': '1000px',
                    'maxWidth': '100%',
                    'overflowY': 'scroll',
                    'overflowX': 'scroll',

                },
                style_header={'backgroundColor': 'rgb(222,222,222)',
                              'fontSize': 16,
                              'fontWeight': 'bold'},
            )
        ),
    ],
        style={'padding-left': 100, 'paddingRight': 100})
])
>>>>>>> intermediate commit

>>>>>>> intermediate file
try:
    from app import app
except ModuleNotFoundError:
    import dash

    app = dash.Dash(__name__)
    app.layout = layout


@app.callback(
    [dep.Output('select_a_run', 'value'),
     dep.Output('warning', 'displayed')],
    [dep.Input('run_url', 'pathname')]
)
def run_URL_update(value):
    if value == '/' or value is None:
        return runs[0], False
    elif value[1:-2] not in runs:
        return runs[0], True
    else:
        return value[1:-2], False


@app.callback(
    dep.Output('lane_select', 'options'),
    [dep.Input('select_a_run', 'value')]
)
def update_lane_options(run_alias):
    run = df[df['Run'] == run_alias]
    run = run[~run['Run'].isna()]
    return [{'label': i, 'value': i} for i in run['LaneNumber'].sort_values(ascending=True).unique()]


@app.callback(
    dep.Output('lane_select', 'value'),
    [dep.Input('lane_select', 'options')]
)
def update_lane_values(available_options):
    return available_options[0]['value']


@app.callback(
    dep.Output('Title', 'children'),
    [dep.Input('lane_select', 'value'),
     dep.Input('select_a_run', 'value')]
)
def update_title(lane_value, run_value):
    return 'You have selected lane {} in run {}'.format(lane_value, run_value)


<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
=======
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
@app.callback(
    dep.Output('Filter_drawer', 'open'),
    [dep.Input('filters', 'n_clicks')]
)
def open_project_drawer(n_clicks):
    return n_clicks is not None


<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> intermediate commit
=======
@app.callback(
    dep.Output('index_threshold', 'value'),
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value')])
def initial_threshold_value(run_alias, lane_alias):
    run = df[(df['Run'] == run_alias) & (df['LaneNumber'] == lane_alias)]
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run = run[~run['library'].isna()]

    index_threshold = sum(run['SampleNumberReads']) / len(run['library'])
    return index_threshold


>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
def Summary_table(run):
    # Adding 'on-the-fly' metrics
    run['% Mapped to Coding'] = run['Coding Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intronic'] = run['Intronic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intergenic'] = run['Intergenic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['rRNA Contamination (%reads aligned)'] = run['rRNA Contamination (%reads aligned)']

    run = run.round(2)
    run = run.filter(
<<<<<<< HEAD
        ['library', 'Run', 'LaneNumber', 'Index1', 'Index2', 'SampleNumberReads', 'Proportion Coding Bases',
         'Proportion Intronic Bases', 'Proportion Intergenic Bases',
         'rRNA Contamination (%reads aligned)', 'Proportion Correct Strand Reads',
=======
@app.callback(
    [dep.Output('Summary Table', 'columns'),
     dep.Output('Summary Table', 'data'),
     dep.Output('Summary Table', 'style_data_conditional'),
     dep.Output('download-link', 'href'),
     dep.Output('download-link', 'download')],
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value')]
)
def Summary_table(run_alias, lane_alias):
=======
@app.callback(
    dep.Output('index_threshold', 'value'),
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value')])
def initial_threshold_value(run_alias, lane_alias):
>>>>>>> Commit before adding percent difference
    run = df[(df['Run'] == run_alias) & (df['LaneNumber'] == lane_alias)]
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run = run[~run['library'].isna()]

<<<<<<< HEAD
=======
def Summary_table(run):
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
=======
    index_threshold = sum(run['SampleNumberReads']) / len(run['library'])
    return index_threshold


>>>>>>> Commit before adding percent difference
def Summary_table(run):
>>>>>>> intermediate file
    # Adding 'on-the-fly' metrics
    run['% Mapped to Coding'] = run['Coding Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intronic'] = run['Intronic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intergenic'] = run['Intergenic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['rRNA Contamination (%reads aligned)'] = run['rRNA Contamination (%reads aligned)']

    run = run.round(2)
    run = run.filter(
        ['library', 'Run', 'LaneNumber', 'Index1', 'Index2', 'SampleNumberReads', '% Mapped to Coding',
         '% Mapped to Intronic',
         '% Mapped to Intergenic', 'rRNA Contamination (%reads aligned)', 'Proportion Correct Strand Reads',
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
@app.callback(
    [dep.Output('Summary Table', 'columns'),
     dep.Output('Summary Table', 'data'),
     dep.Output('Summary Table', 'style_data_conditional'),
     dep.Output('download-link', 'href'),
     dep.Output('download-link', 'download')],
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value')]
)
def Summary_table(run_alias, lane_alias):
    run = df[(df['Run'] == run_alias) & (df['LaneNumber'] == lane_alias)]
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run = run[~run['library'].isna()]

    # Adding 'on-the-fly' metrics
    run['% Mapped to Coding'] = run['Coding Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intronic'] = run['Intronic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['% Mapped to Intergenic'] = run['Intergenic Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['rRNA Contamination (%reads aligned)'] = run['rRNA Contamination (%reads aligned)']

    run = run.round(2)
    run = run.filter(
        ['library', 'Run', 'LaneNumber', 'Index1', 'Index2', 'SampleNumberReads', '% Mapped to Coding',
         '% Mapped to Intronic',
         '% Mapped to Intergenic', 'rRNA Contamination (%reads aligned)', 'Proportion Correct Strand Reads',
>>>>>>> Intermediate commit
=======
        ['library', 'Run', 'LaneNumber', 'Index1', 'Index2', 'SampleNumberReads', '% Mapped to Coding',
         '% Mapped to Intronic',
         '% Mapped to Intergenic', 'rRNA Contamination (%reads aligned)', 'Proportion Correct Strand Reads',
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
         'Coverage'])
    run = run.sort_values('library')

    csv = run.to_csv(index=False)
    csv = 'data:text/csv;charset=utf-8,' + urllib.parse.quote(csv)

    run = run.drop(columns=['Run', 'LaneNumber'])
    run = run.dropna(axis=1, how='all', thresh=None, subset=None, inplace=False)

    columns = [{'name': i, 'id': i,
                'type': 'numeric'} for i in run.columns]

    data = run.to_dict('records')

<<<<<<< HEAD
<<<<<<< HEAD
    # highlighting datatable cells/columns/rows
    style_data_conditional = [{
        'if': {'column_id': 'library'},
        'backgroundColor': 'rgb(222, 222, 222)'
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
    },
        {'if': {'column_id': 'properly paired reads',
                'filter_query': '0 < {properly paired reads} and {properly paired reads} < 20'},
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
         'backgroundColor': 'rgb(219, 75, 75)'},
        {'if': {'column_id': '% Mapped to Coding',
                'filter_query': '0 < {% Mapped to Coding} and {% Mapped to Coding} < 20'},
         'backgroundColor': 'rgb(219, 75, 75)'},
=======
    }, {'if': {'column_id': '% Mapped to Coding',
               'filter_query': '0 < {% Mapped to Coding} and {% Mapped to Coding} < 20'},
        'backgroundColor': 'rgb(219, 75, 75)'},
>>>>>>> intermediate file
        {'if': {'column_id': '% Mapped to Intronic',
                'filter_query': '0 < {% Mapped to Intronic} and {% Mapped to Intronic} < 20'},
         'backgroundColor': 'rgb(219, 75, 75)'},
<<<<<<< HEAD
        {'if': {'column_id': 'Proportion Intergenic Bases',
                'filter_query': '0 < {Proportion Intergenic Bases} and {Proportion Intergenic Bases} < 15'},
=======
         'backgroundColor': 'rgb(219, 75, 75)'},
        {'if': {'column_id': '% Mapped to Coding',
                'filter_query': '0 < {% Mapped to Coding} and {% Mapped to Coding} < 20'},
         'backgroundColor': 'rgb(219, 75, 75)'},
=======
    }, {'if': {'column_id': '% Mapped to Coding',
               'filter_query': '0 < {% Mapped to Coding} and {% Mapped to Coding} < 20'},
        'backgroundColor': 'rgb(219, 75, 75)'},
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
        {'if': {'column_id': '% Mapped to Intronic',
                'filter_query': '0 < {% Mapped to Intronic} and {% Mapped to Intronic} < 20'},
         'backgroundColor': 'rgb(219, 75, 75)'},
        {'if': {'column_id': '% Mapped to Intergenic',
                'filter_query': '0 < {% Mapped to Intergenic} and {% Mapped to Intergenic} < 15'},
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
        {'if': {'column_id': '% Mapped to Intergenic',
                'filter_query': '0 < {% Mapped to Intergenic} and {% Mapped to Intergenic} < 15'},
>>>>>>> Intermediate commit
         'backgroundColor': 'rgb(219, 75, 75)'},
        {'if': {'column_id': 'rRNA Contamination (%reads aligned)',
                'filter_query': '0 < {rRNA Contamination (%reads aligned)} and {rRNA Contamination (%reads aligned)} < 15'},
         'backgroundColor': 'rgb(219, 75, 75)'},
    ]
<<<<<<< HEAD
<<<<<<< HEAD
    return columns, data, style_data_conditional, csv
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
    downloadtimedate = datetime.today().strftime('%Y-%m-%d')
    download = 'PoolQC_%s_%s_%s.csv' % (downloadtimedate, run_alias, lane_alias)
>>>>>>> Intermediate commit
=======
    return columns, data, style_data_conditional, csv
>>>>>>> intermediate file


def update_sampleindices(run, INDEX_THRESHOLD):
    run = run.sort_values('library')
<<<<<<< HEAD
<<<<<<< HEAD
    num_libraries = len(run['library'])
    samples_passing_clusters = '%s/%s' % (sum(i > INDEX_THRESHOLD for i in run['SampleNumberReads']), num_libraries)
=======
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py

<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
=======
    return columns, data, csv


def update_sampleindices(run, index_threshold):
    run = run.sort_values('library')
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1

    total_RNA = len(run['library'])
    Index_Pass = '%s/%s' % (sum(i > 20000 for i in run['SampleNumberReads']), total_RNA)
    Index_Threshold = 50000000
>>>>>>> Intermediate commit
    data = []

<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
    for inx, d in run.groupby(['library']):
<<<<<<< HEAD
<<<<<<< HEAD
        d['Threshold'] = INDEX_THRESHOLD
        d['Color'] = np.where((d['SampleNumberReads'] >= INDEX_THRESHOLD), '#ffffff', '#db4b4b')
=======
@app.callback(
    dep.Output('SampleIndices', 'figure'),
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value')])
def update_sampleindices(run_alias, lane_alias):
    run = df[(df['Run'] == run_alias) & (df['LaneNumber'] == lane_alias)]
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run['Result'] = run['Coding Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['index'] = run['Index1'].str.cat(
        run['Index2'].fillna(''), sep=' ')
=======
def update_sampleindices(run):
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
    run = run.sort_values('library')
=======
>>>>>>> intermediate file
    num_libraries = len(run['library'])
=======
    return columns, data, csv
>>>>>>> intermediate commit


def update_sampleindices(run, index_threshold):
    run = run.sort_values('library')

    data = []

    for inx, d in run.groupby(['library']):
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
        d['Threshold'] = Index_Threshold
        d['Color'] = np.where((d['SampleNumberReads'] >= d['Threshold']), '#ffffff', '#db4b4b')
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
        d['Threshold'] = index_threshold
        d['Color'] = np.where((d['SampleNumberReads'] >= index_threshold), '#ffffff', '#db4b4b')
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
        d['Threshold'] = Index_Threshold
        d['Color'] = np.where((d['SampleNumberReads'] >= d['Threshold']), '#ffffff', '#db4b4b')
>>>>>>> Intermediate commit
=======
        d['Threshold'] = index_threshold
        d['Color'] = np.where((d['SampleNumberReads'] >= index_threshold), '#ffffff', '#db4b4b')
>>>>>>> intermediate file
=======
        d['Threshold'] = INDEX_THRESHOLD
        d['Color'] = np.where((d['SampleNumberReads'] >= INDEX_THRESHOLD), '#ffffff', '#db4b4b')
>>>>>>> intermediate
=======
        d['Threshold'] = index_threshold
<<<<<<< HEAD
        d['Color'] = np.where((d['SampleNumberReads'] >= index_threshold), '#ffffff', '#db4b4b')
>>>>>>> intermediate commit
=======
        d['Color'] = np.where((d['SampleNumberReads'] >= index_threshold), '#20639B', '#db4b4b')
>>>>>>> Commit before adding percent difference
=======
        d['Threshold'] = index_threshold
        d['Color'] = np.where((d['SampleNumberReads'] >= index_threshold), '#20639B', '#db4b4b')
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
        data.append(
            go.Bar(
                x=list(d['library']),
                y=list(d['SampleNumberReads']),
                name=inx,
                marker={'color': list(d['Color'])},
            )
        )
        data.append(
            go.Scatter(
                x=list(d['library']),
                y=list(d['Threshold']),
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> intermediate commit
                mode='markers+lines',
                line={
                    'width': 3,
                    'color': 'rgb(0,0,0)',
                    'dash': 'dash',
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
                }, ))
=======
                }))
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
                }, ))
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
                }))
>>>>>>> Intermediate commit
=======
                }, ))
>>>>>>> intermediate file
=======
                name=inx,
                marker={'color': 'rgb(222,222,222)'},
                width =1,
            )
        )
>>>>>>> git checkout of master for presentation
=======
                }, ))
>>>>>>> intermediate commit

    return {
        'data': data,
        'layout': {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
            'title': 'Index Clusters per Sample. Passed Samples: %s Threshold: %s' % (
                samples_passing_clusters, INDEX_THRESHOLD),
=======
            'title': 'Index Clusters per Sample. Passed Samples: %s Threshold: %s' % (Index_Pass, Index_Threshold),
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
            'title': 'Index Clusters per Sample. Passed Samples: %s Threshold: %s' % (
                samples_passing_clusters, index_threshold),
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
            'title': 'Index Clusters per Sample. Passed Samples: %s Threshold: %s' % (Index_Pass, Index_Threshold),
>>>>>>> Intermediate commit
=======
            'title': 'Index Clusters per Sample. Passed Samples: %s Threshold: %s' % (
<<<<<<< HEAD
                samples_passing_clusters, index_threshold),
>>>>>>> intermediate file
=======
                samples_passing_clusters, INDEX_THRESHOLD),
>>>>>>> intermediate
=======
            'title': 'Index Clusters per Sample',
>>>>>>> intermediate commit
=======
            'title': 'Index Clusters per Sample',
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1
            'xaxis': {'title': 'Sample', 'automargin': True},
            'yaxis': {'title': 'Clusters'},
            'showlegend': False,
            'barmode': 'group',
<<<<<<< HEAD
=======

        }
    }


def percent_difference(run, index_threshold):
    run = run.sort_values('library')
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1

    data = []

    for inx, d in run.groupby('library'):
        d['Per Cent Difference'] = (d['SampleNumberReads'] - index_threshold) / index_threshold * 100
        data.append(
            go.Bar(
                x=list(d['library']),
                y=list(d['Per Cent Difference']),
                name=inx,
                marker={'color': '#20639B'},
            )
        )
    return {
        'data': data,
        'layout': {
            'title': 'Per Cent Difference of Index Clusters',
            'xaxis': {'title': 'Sample', 'automargin': True},
            'yaxis': {'title': 'Per Cent', 'range': [-100, 100]},
            'showlegend': False,
        }
    }

<<<<<<< HEAD
<<<<<<< HEAD

<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
>>>>>>> Commit before adding percent difference
=======

def percent_difference(run, index_threshold):
    run = run.sort_values('library')

    data = []

    for inx, d in run.groupby('library'):
        d['Per Cent Difference'] = (d['SampleNumberReads'] - index_threshold) / index_threshold * 100
        data.append(
            go.Bar(
                x=list(d['library']),
                y=list(d['Per Cent Difference']),
                name=inx,
                marker={'color': '#20639B'},
            )
        )
    return {
        'data': data,
        'layout': {
            'title': 'Per Cent Difference of Index Clusters',
            'xaxis': {'title': 'Sample', 'automargin': True},
            'yaxis': {'title': 'Per Cent', 'range': [-100, 100]},
            'showlegend': False,
        }
    }


>>>>>>> git checkout of master for presentation
@app.callback(
    [dep.Output('SampleIndices', 'figure'),
     dep.Output('Per Cent Difference', 'figure'),
     dep.Output('Summary Table', 'columns'),
     dep.Output('Summary Table', 'data'),
     dep.Output('download-link', 'href'),
     dep.Output('download-link', 'download'),
     dep.Output('object_threshold', 'children'),
     dep.Output('object_passed_samples', 'children'),
     dep.Output('object_option3', 'children')],
    [dep.Input('select_a_run', 'value'),
     dep.Input('lane_select', 'value'),
     dep.Input('index_threshold', 'value'),
     dep.Input('pass/fail', 'value'),
     dep.Input('sample_type', 'value')])
def update_graphs(run_alias, lane_alias, threshold, PassOrFail, sample_type):
    index_threshold = int(threshold)

    run = df[(df['Run'] == run_alias) & (df['LaneNumber'] == lane_alias)]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
    run = run[~run['library'].isna()].drop_duplicates('library')
=======
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run = run[~run['library'].isna()]
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
=======
    run = run[~run['Run'].isna()].drop_duplicates('library')
<<<<<<< HEAD
    run['Result'] = run['Coding Bases'] / run['Passed Filter Aligned Bases'] * 100
    run['index'] = run['Index1'].str.cat(
        run['Index2'].fillna(''), sep=' ')
>>>>>>> Intermediate commit

    if derived_virtual_selected_rows is None:
        derived_virtual_selected_rows = []
=======
    run = run[~run['library'].isna()]
>>>>>>> intermediate file
=======
    run = run[~run['Run'].isna()].drop_duplicates('library')
    run = run[~run['library'].isna()]
>>>>>>> 38b2c891fb75455a842271a5bbd126b486b95cd1

    num_libraries = len(run['library'])
    samples_passing_clusters = '%s/%s' % (sum(i > index_threshold for i in run['SampleNumberReads']), num_libraries)

    pass_or_fail = []
    for row in run['SampleNumberReads']:
        if row >= index_threshold:
            pass_or_fail.append('Pass')
        if row < index_threshold:
            pass_or_fail.append('Fail')
    run['Pass/Fail'] = pass_or_fail
    run = run[run['Pass/Fail'].isin(PassOrFail)]

    run['Sample Type'] = run['library'].str[-2:]
    run = run[run['Sample Type'].isin(sample_type)]

    downloadtimedate = datetime.today().strftime('%Y-%m-%d')
    download = 'PoolQC_%s_%s_%s.csv' % (downloadtimedate, run_alias, lane_alias)

    columns, data, csv = Summary_table(run)

    return update_sampleindices(run, index_threshold), percent_difference(run, index_threshold), columns, data, csv, download, (
            'Threshold: ' + str(index_threshold)), (
                   'Passed Samples: ' + str(samples_passing_clusters)), 'Option3',


<<<<<<< HEAD:dashi/poolqc/pooling_qc_sample.py
=======
>>>>>>> Intermediate commit:poolqc/pooling_qc_sample.py
=======
>>>>>>> intermediate file:poolqc/pooling_qc_sample.py
if __name__ == '__main__':
    app.run_server(debug=True)
